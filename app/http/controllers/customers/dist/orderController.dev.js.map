{"version":3,"sources":["orderController.js"],"names":["Order","require","moment","stripe","process","env","STRIPE_PRIVATE_KEY","orderController","store","req","res","body","phone","address","stripeToken","paymentType","status","json","message","order","customerId","user","_id","items","session","cart","save","then","result","populate","path","err","placedOrder","charges","create","amount","totalPrice","source","currency","description","paymentStatus","ord","eventEmitter","app","get","emit","console","log","index","find","sort","orders","header","render","show","findById","params","id","toString","redirect","module","exports"],"mappings":"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","sourcesContent":["const Order = require('../../../models/order')\r\nconst moment = require('moment')\r\nconst stripe = require('stripe')(process.env.STRIPE_PRIVATE_KEY)\r\nfunction orderController(){\r\n    return{\r\n        store(req, res){\r\n            //Validate request\r\n            const { phone, address, stripeToken, paymentType } = req.body\r\n            if(!phone || !address){\r\n                return res.status(422).json({message: 'Please fill all the fields.'})\r\n            }\r\n\r\n            const order = new Order({\r\n                customerId: req.user._id,\r\n                items: req.session.cart.items,\r\n                phone,\r\n                address\r\n            })\r\n\r\n            order.save().then(result =>{\r\n                Order.populate(result, { path: 'customerId'}, (err, placedOrder)=>{\r\n                   // req.flash('success', 'Order placed Successfully')\r\n                \r\n                 //Stripe payment\r\n                 if(paymentType === 'card'){\r\n                    stripe.charges.create({\r\n                        amount: req.session.cart.totalPrice * 100,\r\n                        source: stripeToken,\r\n                        currency: 'inr',\r\n                        description: `Pizza order: ${placedOrder._id}`\r\n\r\n                    }).then(()=>{\r\n                       placedOrder.paymentStatus = true\r\n                       placedOrder.paymentType = paymentType\r\n                       placedOrder.save().then((ord)=>{\r\n                           // Emit event \r\n                const eventEmitter = req.app.get('eventEmitter')\r\n                eventEmitter.emit('orderPlaced', ord)\r\n                delete req.session.cart \r\n                return res.json({message: 'Yay ðŸ˜€ðŸ˜€ Payment successful, Order placed Successfully'})\r\n\r\n                       }).catch((err)=>{\r\n                            console.log(err)\r\n                       })\r\n                    }).catch((err)=>{\r\n                        delete req.session.cart \r\n                        return res.json({message: 'Order placed but Payment failed, Dont worry you can also pay at delivery time'})\r\n                    })\r\n                 }else{\r\n                    delete req.session.cart \r\n                    return res.json({message: 'Order placed, Pay at delivery time'})\r\n                 }\r\n\r\n\r\n                })\r\n               \r\n     \r\n            }).catch(err =>{\r\n                return res.status(500).json({message: 'Something went wrong.'})\r\n            })\r\n        },\r\n\r\n        async index(req, res){\r\n            const orders = await Order.find({ customerId: req.user._id }, null, { sort:{ 'createdAt': -1 }})\r\n            res.header('Cache-Control', 'no-store')\r\n            res.render('customers/orders', {orders: orders, moment: moment})\r\n        },\r\n\r\n        async show(req, res){\r\n            const order = await Order.findById(req.params.id)\r\n            //User authorization\r\n            if(req.user._id.toString() === order.customerId.toString()){\r\n                return  res.render('customers/singleOrder', { order })\r\n            }else{\r\n                return res.redirect('/')\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = orderController"],"file":"orderController.dev.js"}