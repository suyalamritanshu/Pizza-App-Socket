{"version":3,"sources":["orderController.js"],"names":["Order","require","moment","process","env","STRIPE_PRIVATE_KEY","orderController","store","req","res","_req$body","body","phone","address","stripeToken","paymentType","status","json","message","customerId","_id","session","items","save","then","result","populate","path","err","placedOrder","cart","user","create","totalPrice","source","description","concat","paymentStatus","ord","app","get","console","log","index","orders","regeneratorRuntime","async","_context","prev","next","awrap","find","sort","createdAt","sent","header","stop","show","order","_context2","findById","params","id","toString","abrupt","render","redirect","module","exports"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,yBAChBC,OAASD,QAAQ,UADjBD,OAAQC,QAAQ,SAARA,CAAQE,QAAAC,IAAtBC,oBAGA,SAASC,kBAFHJ,MAAM,CAIJK,MAJI,SAIEC,EAAKC,GAAI,IAAAC,EAE0CF,EAAIG,KAAjDC,EAFGF,EAEHE,MAAOC,EAFJH,EAEIG,QAASC,EAFbJ,EAEaI,YAAaC,EAF1BL,EAE0BK,YAJxCT,IAAAA,IAATO,EACU,OAAAJ,EAAAO,OAAA,KAAAC,KAAA,CAAAC,QAAA,gCAG2DP,IAF9CX,MAAA,CAAAmB,WAEHP,EAAAA,KAFGQ,IAEIP,MAFJL,EAAAa,QAEIR,KAFJS,MAEaR,MAAAA,EAAaC,QAAAA,IAEvBQ,OAAHC,KAAA,SAAAC,GAAsBP,MAASQ,SAAAD,EAAA,CAAAE,KAAA,cAAA,SAAAC,EAAAC,GAG/B,GAAa,SAAVd,EA2BV,cADWM,EAAAA,QAAXS,KACWb,EAAJA,KAAS,CAAAC,QAAA,uCA1BJV,OAAIuB,QADIC,OAAA,CAETX,OAFS,IAEIC,EAAAA,QAFJQ,KAAAG,WAAAC,OAAApB,EAIpBD,SAAAA,MAJJsB,YAAA,gBAAAC,OAAAP,EAAAT,OAQmBK,KAAAA,WAAgBI,EAAAQ,eAAA,EAAgBT,EAAKC,YAAcd,EAC/Dc,EAAAN,OAAAC,KAAA,SAAAc,GAMKJ,OAHP1B,EAA0B+B,IAAAC,IAAA,gBACRR,KAAO,cAAAM,UACV9B,EAAIa,QAAQS,KACZhB,EAAAA,KAAAA,CAFUI,QAAA,6DAJvB,MAQgB,SAAAU,GAEPa,QAAIC,IAAAd,OAlBJpB,MAoBOO,SAAAA,GAER,cADJP,EAAmBgB,QAAKM,KACpBrB,EAAAQ,KAAA,CAAAC,QAAA,wFA1BX,MAoCeV,SAAAA,GACP,OAAOC,EAAIQ,OAAK,KAAAA,KAAA,CAAAC,QAAA,6BAtBvByB,MAvBL,SA+CUnC,EAAAC,GA/CV,IAAAmC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAgD2BpB,MAAnBqB,KAAA,CAAAhC,WAAAX,EAAAuB,KAAAX,KAAA,KAAA,CAAAgC,KAAA,CAAAC,WAAA,MAhDR,KAAA,EAgDQT,EAhDRG,EAAAO,KAiDQ7C,EAAA8C,OAAWtC,gBAAK,YAACC,EAAAA,OAAS,mBAAA,CAAA0B,OAAAA,EAAA1C,OAAAA,SAjDlC,KAAA,EAAA,IAAA,MAAA,OAAA6C,EAAAS,WAmBIC,KAnBJ,SAmBIjD,EAAAC,GAnBJ,IAAAiD,EAAA,OAAAb,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAV,MAAA,KAAA,EAAA,OAAAU,EAAAV,KAAA,EAAAJ,mBAAAK,MAwDYlD,MAAG4D,SAAApD,EAAAqD,OAAAC,KAxDf,KAAA,EAAA,GAwDSJ,EAxDTC,EAAAL,KAyDiCpC,EAASa,KAAAX,IAAA2C,aAAAL,EAAAvC,WAAA4C,WAzD1C,OAAAJ,EAAAK,OAAA,SAyDIvD,EAAAwD,OAAA,wBAAA,CAAAP,MAAAA,KAzDJC,EAAAV,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAU,EAAAK,OAAA,SAGFvD,EAAAyD,SAAA,MAHE,KAAA,EAAA,IAAA,MAAA,OAAAP,EAAAH,YAGFW,OAAAC,QAAA9D","file":"orderController.min.js","sourcesContent":["const Order = require('../../../models/order')\r\nconst moment = require('moment')\r\nconst stripe = require('stripe')(process.env.STRIPE_PRIVATE_KEY)\r\nfunction orderController(){\r\n    return{\r\n        store(req, res){\r\n            //Validate request\r\n            const { phone, address, stripeToken, paymentType } = req.body\r\n            if(!phone || !address){\r\n                return res.status(422).json({message: 'Please fill all the fields.'})\r\n            }\r\n\r\n            const order = new Order({\r\n                customerId: req.user._id,\r\n                items: req.session.cart.items,\r\n                phone,\r\n                address\r\n            })\r\n\r\n            order.save().then(result =>{\r\n                Order.populate(result, { path: 'customerId'}, (err, placedOrder)=>{\r\n                   // req.flash('success', 'Order placed Successfully')\r\n                \r\n                 //Stripe payment\r\n                 if(paymentType === 'card'){\r\n                    stripe.charges.create({\r\n                        amount: req.session.cart.totalPrice * 100,\r\n                        source: stripeToken,\r\n                        currency: 'inr',\r\n                        description: `Pizza order: ${placedOrder._id}`\r\n\r\n                    }).then(()=>{\r\n                       placedOrder.paymentStatus = true\r\n                       placedOrder.paymentType = paymentType\r\n                       placedOrder.save().then((ord)=>{\r\n                           // Emit event \r\n                const eventEmitter = req.app.get('eventEmitter')\r\n                eventEmitter.emit('orderPlaced', ord)\r\n                delete req.session.cart \r\n                return res.json({message: 'Yay ðŸ˜€ðŸ˜€ Payment successful, Order placed Successfully'})\r\n\r\n                       }).catch((err)=>{\r\n                            console.log(err)\r\n                       })\r\n                    }).catch((err)=>{\r\n                        delete req.session.cart \r\n                        return res.json({message: 'Order placed but Payment failed, Dont worry you can also pay at delivery time'})\r\n                    })\r\n                 }else{\r\n                    delete req.session.cart \r\n                    return res.json({message: 'Order placed, Pay at delivery time'})\r\n                 }\r\n\r\n\r\n                })\r\n               \r\n     \r\n            }).catch(err =>{\r\n                return res.status(500).json({message: 'Something went wrong.'})\r\n            })\r\n        },\r\n\r\n        async index(req, res){\r\n            const orders = await Order.find({ customerId: req.user._id }, null, { sort:{ 'createdAt': -1 }})\r\n            res.header('Cache-Control', 'no-store')\r\n            res.render('customers/orders', {orders: orders, moment: moment})\r\n        },\r\n\r\n        async show(req, res){\r\n            const order = await Order.findById(req.params.id)\r\n            //User authorization\r\n            if(req.user._id.toString() === order.customerId.toString()){\r\n                return  res.render('customers/singleOrder', { order })\r\n            }else{\r\n                return res.redirect('/')\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = orderController"]}