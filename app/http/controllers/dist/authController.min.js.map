{"version":3,"sources":["authController.js"],"names":["require","request","passport","User","bcrypt","login","req","res","authController","postLogin","next","_req$body","body","email","password","render","flash","redirect","authenticate","err","user","info","message","role","_getRedirectUrl","register","postRegister","_req$body2","name","hashedPassword","regeneratorRuntime","async","_context","prev","abrupt","exists","result","awrap","hash","sent","stop","logout","module","exports"],"mappings":"0BAAoBA,QAAQ,WAApBC,iBAAAA,QACFC,SAAWF,QAAQ,YACnBG,KAAOH,QAFOA,qBAAZC,OAGOD,QAHPC,UACR,SAAMC,iBAEAE,MAAM,CAOJC,MAPI,SAOEC,EAAKC,GALVC,EAAAA,OAAT,eACIC,UAHQ,SAGRH,EAAAC,EAAAG,GAAA,IAAAC,EAGOL,EAAAM,KAAAC,EAHPF,EAGOE,MAAAC,EAHPH,EAGOG,SAEMC,IAAAA,IAAOD,EAFb,OAAAR,EAAAU,MAAA,QAAA,2BAAAT,EAAAU,SAKOX,UAECO,SAFcK,aAAA,QAAA,SAAAC,EAAAC,EAAAC,GAAA,OAAAF,GAUVb,EAAIU,MAAM,QAASK,EAAKC,SANpCZ,EAAuBS,IAGtBC,OAIWd,EAAOI,MAAPU,EAAA,SAAAD,GACH,OAAAA,GASIb,EAAIU,MAAM,QAASK,EAAKC,SAPlBZ,EAAAS,IAYHZ,EAAIU,SAlCH,SAACX,GAJnB,MAAW,UAARN,EAAQoB,KAAAG,KAArB,gBAAA,mBAsCwCC,CAAgBlB,OAXpCA,EAAIU,MAAM,QAASK,EAAKC,SAP9Bf,EAAsBU,SAAS,YAN1BJ,CAkBIM,EAAKZ,EAAAG,IAGPe,SAlCT,SAkCSnB,EAAAC,GASTA,EAAIQ,OAAO,kBAxBTW,aAnBF,SAmBEpB,EAAAC,GAnBF,IAAAoB,EAAAC,EAAAf,EAAAC,EAAAe,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAtB,MAAA,KAAA,EAAA,GAAAiB,EAMDrB,EAAAM,KAAAgB,EANCD,EAMDC,KAAAf,EANCc,EAMDd,MAAAC,EANCa,EAMDb,SAqCKC,GAAOF,GAAXC,EA3CA,CAAAkB,EAAAtB,KAAA,EAAA,MAAA,OAMDJ,EAAAU,MAAA,QAAA,2BAwCEU,EAxCFV,MAAA,OAAAY,GAAAtB,EAAAU,MAAA,QAAAH,GANCmB,EAAAE,OAAA,SAqDU3B,EAAIU,SAAS,cArDvB,KAAA,EAAA,OAMDd,KAAAgC,OAAA,CAAAtB,MAAAA,GAAA,SAAAM,EAAAiB,GAAA,GAAAA,EAAA,OAqDI9B,EAAIU,MAAM,QAAS,uBArDvBV,EAAAU,MA2CG,OAAUH,GA3CbP,EAAAU,MAAA,QAAAH,GAAAN,EAAAU,SAAA,eANCe,EAAAtB,KAAA,EAAAoB,mBAAAO,MAoDsBxB,OAAnByB,KAAAxB,EAAA,KApDH,KAAA,EAoDGR,EApDH0B,EAAAO,KAwDD,IAAApC,KAAA,CACFA,KAAAA,EAAcU,MAAAA,EAAFC,SAAkBe,IAGxBvB,OAAAA,KAAIU,SAAAA,GAEJ,OAAAT,EAAOA,SAAIU,OAFXX,MAGF,SAAAa,GAmBD,OAlBHb,EAPAU,MASD,QAAA,wBAgBWT,EAAIU,SAAS,eAlFpB,KAAA,GAAA,IAAA,MAAA,OAAAe,EAAAQ,WAMDC,OANC,SAMDnC,EAAAC,GA+DH,OAFMsB,EAAAA,SAENtB,EAAAU,SAAA,YAEsByB,OAAAC,QAjEnBnC","file":"authController.min.js","sourcesContent":["const { request } = require(\"express\")\r\nconst passport = require('passport')\r\nconst User = require('../../models/user')\r\nconst bcrypt = require('bcrypt')\r\n\r\nfunction authController(){\r\n    const _getRedirectUrl = (req) => {\r\n        return req.user.role === 'admin' ? '/admin/orders' : '/customer/orders'\r\n    }\r\n    return {\r\n        login(req, res){\r\n             res.render('auth/login')\r\n        },\r\n\r\n        postLogin(req, res, next){\r\n\r\n            const {email, password } = req.body\r\n           //Validate request\r\n           if(!email || !password){\r\n               req.flash('error', 'All fields are required')\r\n               return res.redirect('/login')\r\n           }\r\n              passport.authenticate('local', (err, user, info) =>{\r\n                   if(err){\r\n                       req.flash('error', info.message)\r\n                       return next(err)\r\n                   }   \r\n\r\n                    if(!user) {\r\n                    req.flash('error', info.message )\r\n                    return res.redirect('/login')\r\n                }\r\n\r\n                req.logIn(user, (err) => {\r\n                    if(err) {\r\n                        req.flash('error', info.message ) \r\n                        return next(err)\r\n                    }\r\n\r\n\r\n                    return res.redirect(_getRedirectUrl(req))\r\n                })\r\n            })(req, res, next)\r\n        },\r\n\r\n        register(req, res){\r\n            res.render('auth/register')\r\n       },\r\n\r\n       async postRegister (req, res) {\r\n           const { name, email, password } = req.body\r\n           //Validate request\r\n           if(!name || !email || !password){\r\n               req.flash('error', 'All fields are required')\r\n               req.flash('name', name)\r\n               req.flash('email', email)\r\n               return res.redirect('/register')\r\n           }\r\n\r\n           // Check if email exists \r\n         User.exists({ email: email }, (err, result) => {\r\n            if(result) {\r\n               req.flash('error', 'Email already taken')\r\n               req.flash('name', name)\r\n               req.flash('email', email) \r\n               return res.redirect('/register')\r\n            }\r\n        })\r\n\r\n        //Hash Password\r\n        const hashedPassword = await bcrypt.hash(password, 10)\r\n\r\n        // Create a user\r\n\r\n        const user = new User({\r\n            name,\r\n            email,\r\n            password: hashedPassword\r\n        })\r\n\r\n        user.save().then((user) =>{\r\n            //Login\r\n                return res.redirect('/')\r\n        }).catch(err =>{\r\n            req.flash('error', 'Something went wrong')\r\n            return res.redirect('/register')\r\n        })\r\n       },\r\n\r\n       logout(req, res){\r\n           req.logout()\r\n           return res.redirect('/login')\r\n       }\r\n    }\r\n}\r\n\r\nmodule.exports = authController"]}