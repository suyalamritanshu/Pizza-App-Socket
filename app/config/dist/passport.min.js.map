{"version":3,"sources":["passport.js"],"names":["LocalStrategy","require","Strategy","User","init","passport","use","usernameField","email","password","done","user","regeneratorRuntime","async","_context","prev","next","awrap","findOne","sent","abrupt","message","bcrypt","compare","then","match","err","stop","_id","deserializeUser","id","findById"],"mappings":"aAAA,IAAMA,cAAgBC,QAAQ,kBAAkBC,SAC1CC,KAAOF,QAAQ,kBADfD,OAAAA,QAAgBC,UACtB,SAAUG,KAAGH,GAITI,EAASC,IAAI,IAAIN,cAAc,CAAEO,cAAe,SAAW,SAAOC,EAAOC,EAAUC,GAAxB,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MADvCd,KAAAe,QAAA,CAAAV,MAAAA,KACuC,KAAA,EAAA,GADjDH,EACiDS,EAAAK,KAAA,CAAAL,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAM,OAAA,SAAXV,EAAA,MAAA,EAAA,CAAAW,QAAA,6BAAW,KAAA,EAAAC,OAAAC,QAAAd,EAAAE,EAAAF,UAAAe,KAAA,SAAAC,GAAA,OAAAA,EAAAf,EAAA,KAAAC,EAAA,CAAAU,QAAA,0BAAAX,EAAA,MAAA,EAAA,CAAAW,QAAA,iCAAA,MAAA,SAAAK,GAGrBlB,OAAKE,EAAEF,MAAAA,EAAAA,CAAAA,QAAAA,2BAHc,KAAA,EAAA,IAAA,MAAA,OAAAM,EAAAa,aAGjDhB,EAAAA,cAHiD,SAAAA,EAAAD,GAmBvDA,EAAK,KAAMC,EAAKiB,OAnBuCvB,EAAAwB,gBAAA,SAAAC,EAAApB,GAAAP,KAAA4B,SAAAD,EAAA,SAAAJ,EAAAf,GAwBnDD,EAAKgB,EAAKf,OAhBdW,OAAAA,QAAAA","file":"passport.min.js","sourcesContent":["const LocalStrategy = require('passport-local').Strategy\r\nconst User = require('../models/user')\r\nconst bcrypt = require('bcrypt')\r\n\r\nfunction init(passport) {\r\n    passport.use(new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {\r\n        // Login\r\n        // check if email exists\r\n        const user = await User.findOne({ email: email })\r\n        if(!user) {\r\n            return done(null, false, { message: 'No user with this email' })\r\n        }\r\n\r\n        bcrypt.compare(password, user.password).then(match => {\r\n            if(match) {\r\n                return done(null, user, { message: 'Logged in succesfully' })\r\n            }\r\n            return done(null, false, { message: 'Wrong username or password' })\r\n        }).catch(err => {\r\n            return done(null, false, { message: 'Something went wrong' })\r\n        })\r\n    }))\r\n\r\n    passport.serializeUser((user, done) => {\r\n        done(null, user._id)\r\n    })\r\n\r\n    passport.deserializeUser((id, done) => {\r\n        User.findById(id, (err, user) => {\r\n            done(err, user)\r\n        })\r\n    })\r\n\r\n}\r\n\r\nmodule.exports = init"]}