{"version":3,"sources":["passport.js"],"names":["LocalStrategy","require","Strategy","User","bcrypt","init","passport","use","usernameField","email","password","done","findOne","user","message","compare","then","match","err","serializeUser","_id","deserializeUser","id","findById","module","exports"],"mappings":";;AAAA,IAAMA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,QAAhD;;AACA,IAAMC,IAAI,GAAGF,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,SAASI,IAAT,CAAcC,QAAd,EAAwB;AACpBA,EAAAA,QAAQ,CAACC,GAAT,CAAa,IAAIP,aAAJ,CAAkB;AAAEQ,IAAAA,aAAa,EAAE;AAAjB,GAAlB,EAA8C,iBAAOC,KAAP,EAAcC,QAAd,EAAwBC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAGpCR,IAAI,CAACS,OAAL,CAAa;AAAEH,cAAAA,KAAK,EAAEA;AAAT,aAAb,CAHoC;;AAAA;AAGjDI,YAAAA,IAHiD;;AAAA,gBAInDA,IAJmD;AAAA;AAAA;AAAA;;AAAA,6CAK5CF,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEG,cAAAA,OAAO,EAAE;AAAX,aAAd,CALwC;;AAAA;AAQvDV,YAAAA,MAAM,CAACW,OAAP,CAAeL,QAAf,EAAyBG,IAAI,CAACH,QAA9B,EAAwCM,IAAxC,CAA6C,UAAAC,KAAK,EAAI;AAClD,kBAAGA,KAAH,EAAU;AACN,uBAAON,IAAI,CAAC,IAAD,EAAOE,IAAP,EAAa;AAAEC,kBAAAA,OAAO,EAAE;AAAX,iBAAb,CAAX;AACH;;AACD,qBAAOH,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEG,gBAAAA,OAAO,EAAE;AAAX,eAAd,CAAX;AACH,aALD,WAKS,UAAAI,GAAG,EAAI;AACZ,qBAAOP,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEG,gBAAAA,OAAO,EAAE;AAAX,eAAd,CAAX;AACH,aAPD;;AARuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C,CAAb;AAkBAR,EAAAA,QAAQ,CAACa,aAAT,CAAuB,UAACN,IAAD,EAAOF,IAAP,EAAgB;AACnCA,IAAAA,IAAI,CAAC,IAAD,EAAOE,IAAI,CAACO,GAAZ,CAAJ;AACH,GAFD;AAIAd,EAAAA,QAAQ,CAACe,eAAT,CAAyB,UAACC,EAAD,EAAKX,IAAL,EAAc;AACnCR,IAAAA,IAAI,CAACoB,QAAL,CAAcD,EAAd,EAAkB,UAACJ,GAAD,EAAML,IAAN,EAAe;AAC7BF,MAAAA,IAAI,CAACO,GAAD,EAAML,IAAN,CAAJ;AACH,KAFD;AAGH,GAJD;AAMH;;AAEDW,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["const LocalStrategy = require('passport-local').Strategy\r\nconst User = require('../models/user')\r\nconst bcrypt = require('bcrypt')\r\n\r\nfunction init(passport) {\r\n    passport.use(new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {\r\n        // Login\r\n        // check if email exists\r\n        const user = await User.findOne({ email: email })\r\n        if(!user) {\r\n            return done(null, false, { message: 'No user with this email' })\r\n        }\r\n\r\n        bcrypt.compare(password, user.password).then(match => {\r\n            if(match) {\r\n                return done(null, user, { message: 'Logged in succesfully' })\r\n            }\r\n            return done(null, false, { message: 'Wrong username or password' })\r\n        }).catch(err => {\r\n            return done(null, false, { message: 'Something went wrong' })\r\n        })\r\n    }))\r\n\r\n    passport.serializeUser((user, done) => {\r\n        done(null, user._id)\r\n    })\r\n\r\n    passport.deserializeUser((id, done) => {\r\n        User.findById(id, (err, user) => {\r\n            done(err, user)\r\n        })\r\n    })\r\n\r\n}\r\n\r\nmodule.exports = init"],"file":"passport.dev.js"}