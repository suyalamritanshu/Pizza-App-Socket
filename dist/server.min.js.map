{"version":3,"sources":["server.js"],"names":["require","config","express","ejs","expressLayout","app","env","PORT","mongoose","flash","path","Emitter","connect","process","MONGO_CONNECTION_URL","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","connection","once","MongoDbStore","err","passport","log","eventEmitter","COOKIE_SECRET","console","store","create","saveUninitialized","cookie","mongoUrl","session","passportInit","use","urlencoded","extended","json","res","next","locals","req","user","set","join","__dirname","status","render","server","listen","port","io","on","socket","orderId","data","to","concat","emit"],"mappings":"aAAAA,QAAQ,UAAUC,SAClB,IAAMC,QAAUF,QAAQ,WADxBA,IAAQE,UAGFC,IAAMH,QAAQ,OAFdE,KAAOF,QAAU,QAIjBI,cAAgBJ,QAAQ,uBAHxBK,KAAMH,QAAZI,IAAAC,MAAA,IAKMC,SAAWR,QAAQ,YAJnBG,QAAMH,QAAZ,mBAMMS,MAAQT,QAAQ,iBALhBU,aAAeV,QAArB,iBACMI,SAAaJ,QAAGA,YAQhBW,QAAUX,QAAQ,UAMxBQ,SAASI,QAAQC,QAAQP,IAAIQ,qBAAsB,CAAEC,iBAAiB,EAAMC,gBAAe,EAAMC,oBAAoB,EAAMC,kBAAmB,IAV9I,IAAMT,WAAeD,SAACW,WAYtBA,WAAWC,KAAK,OAAQ,WAXlBC,QAAAA,IAAY,2BAWlB,MAES,SAAAC,GAXHC,QAAQC,IAAGxB,0BAOjBQ,IAAAA,aAAiBK,IAAQP,QAA4BS,IAAAA,IAAAA,eAAFU,cACnDpB,IAAMc,IAAAA,QAAU,CAChBA,OAAAA,QAAgBb,IAAAoB,cACZC,QAAAA,EACHC,MAFDP,aAESQ,OAAO,CACZF,SAAYd,QAAAP,IAAAQ,uBAiBhBgB,mBAAmB,EAZnBC,OAAMN,CAAAA,OAAY,UASlBG,IAAAA,aAAmB5B,QAAQ,yBACvBgC,aAAQT,UAEZO,IAAAA,IAAAA,SAAAA,cACAC,IAAAA,IAAMR,SAAEU,WAMR5B,IAAM6B,IAAAA,SAIN7B,IAAI8B,IAAIZ,QAAAA,OAASU,WAMjB5B,IAAI8B,IAAI1B,QAAR2B,WAGA,CAAAC,UAAA,KAGAhC,IAAI8B,IAAIjC,QAAQoC,QADaD,IAAAA,IAAAA,SAAAA,EAAUE,EAAAC,GAAvCD,EAAAE,OAAAR,QAAAS,EAAAT,QACGM,EAAHE,OAAQvC,KAAAwC,EAERC,KAIGH,MACFnC,IAED8B,IAAA/B,eAGAC,IAAIuC,IAAI,QAASlC,KAAKmC,KAAKC,UAAW,qBADtCzC,IAAI8B,IAAI/B,cAAR,OAEAC,QAAQ,eAARA,CAAuBA,KAEvBL,IAAAA,IAAQ,SAAA0C,EAAAH,GAGJA,EAAIQ,OAAO,KAAKC,OAAO,gBAM3B,IAAMC,OAAS5C,IAAI6C,OAAOC,MAA1BxB,QAAMsB,IAAM,4BAAZE,MAKA,IAAMC,GAAKpD,QAAQ,YAARA,CAAqBiD,QAChCG,GAAGC,GAAG,aAAc,SAAAC,GAGTA,EAAOT,GAAP,OAAA,SAAAU,GADND,EAAAT,KAAAU,OAUL9B,aAAa4B,GAAG,eAAe,SAAAG,GACzBJ,GAAFK,GAAE,SAAAC,OAAFF,EAAmBG,KAAKA,KAAA,eAAxBH,KADJ/B,aAAa4B,GAAG,cAAe,SAACG,GAC5BJ,GAAGK,GAAG,aAAaE,KAAK,cAAeH","file":"server.min.js","sourcesContent":["require('dotenv').config()\r\nconst express = require('express')\r\nconst app = express()\r\nconst ejs = require('ejs')\r\nconst path = require('path')\r\nconst expressLayout = require('express-ejs-layouts')\r\nconst port = process.env.PORT || 3000\r\nconst mongoose = require('mongoose')\r\nconst session = require('express-session')\r\nconst flash = require('express-flash')\r\nconst MongoDbStore = require('connect-mongo')\r\n\r\nconst passport = require('passport')\r\nconst Emitter = require('events')\r\n\r\n\r\n// Database connection\r\n\r\n\r\nmongoose.connect(process.env.MONGO_CONNECTION_URL, { useNewUrlParser: true, useCreateIndex:true, useUnifiedTopology: true, useFindAndModify : true });\r\nconst connection = mongoose.connection;\r\nconnection.once('open', () => {\r\n    console.log('Database connected...');\r\n}).catch(err => {\r\n    console.log('Connection failed...')\r\n});\r\n\r\n//Event emiiter\r\n\r\nconst eventEmitter = new Emitter()\r\napp.set('eventEmitter', eventEmitter)\r\n\r\n\r\n\r\n// Session config\r\napp.use(session({\r\nsecret: process.env.COOKIE_SECRET,\r\nresave: false,\r\nstore: MongoDbStore.create({\r\n    mongoUrl: process.env.MONGO_CONNECTION_URL\r\n}),\r\nsaveUninitialized: false,\r\ncookie: { maxAge: 1000 * 60 * 60 * 24 } // 24 hour\r\n}))\r\n\r\n\r\n//Passport config\r\n\r\nconst passportInit = require('./app/config/passport')\r\npassportInit(passport)\r\n\r\napp.use(passport.initialize())\r\napp.use(passport.session())\r\n\r\n\r\n\r\n\r\n\r\napp.use(flash())\r\n\r\n\r\n//Assets\r\napp.use(express.static('public'))\r\napp.use(express.urlencoded({ extended: false}))\r\napp.use(express.json())\r\n\r\n//Global middlewares\r\napp.use((req, res, next) =>{\r\n   res.locals.session = req.session\r\n   res.locals.user = req.user\r\n   next()\r\n})\r\n\r\n//set template engine\r\n\r\napp.use(expressLayout)\r\napp.set('views', path.join(__dirname, '/resources/views'))\r\napp.set('view engine', 'ejs')\r\n\r\nrequire('./routes/web')(app)\r\n\r\napp.use((req, res) =>{\r\n    res.status(404).render('errors/404')\r\n})\r\n// const server = app.listen(process.env.PORT || 3000, () => {\r\n//     console.log(`Listening on port ${PORT1}`)\r\n// })\r\n\r\nconst server = app.listen(port);\r\nconsole.log(\"Server listening on port \"+ port);\r\n\r\n//Socket\r\n\r\nconst io = require('socket.io')(server)\r\nio.on('connection', (socket)=>{\r\n     \r\n     socket.on('join', (orderId) =>{\r\n           socket.join(orderId)\r\n     })\r\n})\r\n\r\n\r\neventEmitter.on('orderUpdated', (data) => {\r\n    io.to(`order_${data.id}`).emit('orderUpdated', data)\r\n})\r\n\r\neventEmitter.on('orderPlaced', (data) => {\r\n    io.to('adminRoom').emit('orderPlaced', data)\r\n})"]}