{"version":3,"sources":["app.js"],"names":["_axios","_interopRequireDefault","require","_noty","_admin","_moment","_stripe","addToCart","document","querySelectorAll","cartCounter","querySelector","updateCart","pizza","axios","post","then","res","innerText","data","totalQty","Noty","type","timeout","text","progressBar","layout","show","err","btn","e","JSON","parse","dataset","alertMsg","setTimeout","remove","statuses","hiddenInput","value","order","createElement","updateStatus","forEach","status","classList","stepCompleted","add","updatedAt","format","appendChild","time","nextElementSibling","initStripe","socket","io","initAdmin","emit","concat","_id","adminAreaPath","window","location","pathname","includes","updatedOrder","_objectSpread"],"mappings":"aAAA,IAAAA,OAAAC,uBAAAC,QAAA,UACAC,MAAAF,uBAAAC,QAAA,SADAE,OAAAF,QAAA,WAGAG,QAAAJ,uBAAAC,QAAA,WAFAI,QAAAJ,QAAA,+yBAMA,IAAIK,UAAYC,SAASC,iBAAiB,gBAJ1CC,YAAAF,SAAAG,cAAA,gBAMA,SAASC,WAAWC,GALpBC,OAAAA,QAAAC,KAAA,eAAAF,GAAAG,KAAA,SAAAC,GAOQP,YAAYQ,UAAYD,EAAIE,KAAKC,SAEjC,IAAIC,MAAAA,QAAK,CACLC,KAAM,UACNC,QAAS,IACTC,KAAM,qBACNC,aAAa,EACbC,OAAQ,YACTC,SAfX,MAGa,SAAAC,GACTlB,IAAAA,MAAAA,QAAW,CAcHY,KAAM,QAbTV,QAAWC,IACfC,KAAAA,uBACGJ,aAAA,IAEIW,SAIAI,UAAAA,QAAW,SAAEI,GACbH,EAAAA,iBAAQ,QAAA,SAAAI,GARflB,WAGGmB,KAAAC,MAAAH,EAAAI,QAAApB,YAYIY,IAAAA,SAAWjB,SAAEG,cAAA,kBAJRuB,UAXZC,WAAA,WAkBJD,SAAAE,UAcM,KAPN,IAEDC,SAAA7B,SAAAC,iBAAA,gBAYI6B,YAAc9B,SAASG,cAAc,gBAXnCuB,MAAQI,YAAY3B,YAAc4B,MAAA,KAaxCC,MAAQT,KAAKC,MAAMQ,OAXfL,IAAAA,KAAAA,SAAWM,cAAM,SAGpB,SAIDC,aAAAF,GAUIH,SAASM,QAAQ,SAACC,GACdA,EAAOC,UAAUT,OAAO,kBAV5BC,EAAW7B,UAASC,OAAAA,aAEpB+B,IAAKM,GAAiBR,EACrBD,SAAQL,QAAL,SAARY,GAEWpC,IAAAA,EAASiC,EAAcR,QAAlCW,OAWeE,GARNJ,EAAaF,UAAMO,IAAA,kBAGbF,GAAPL,EAAwBI,SAF5BE,GAAA,EAIOA,KAAa5B,WAAjB,EAAAb,QAAA,SAAAmC,EAAAQ,WAAAC,OAAA,WACSN,EAAQO,YAAAC,MACGP,EAAOX,oBAUdW,EAAOQ,mBAAmBP,UAAUE,IAAI,QAF5CH,aAAOM,QACP,EAAA5C,QAAA+C,cAOf,IAAAC,OAAAC,MAUD,EAAAnD,OAAAoD,WAAUF,QAGPd,OAHHc,OAAAG,KAAA,OAAA,SAAAC,OAAAlB,MACAmB,MAMC,IAAAC,cAAAC,OAAAC,SAAAC,SAGEH,cAAcI,SAAS,YADtBJ,EAAAA,OAAAA,WAAAA,QAGAN,OAAOG,KAAK,OAAQ,cAApBH,OAAAA,GAAOG,eAAa,SAAAtC,GACvB,IAAA8C,EAAAC,cAAA,GAAA1B,OAIGyB,EAAajB,WAAY,EAAA3C,QAAA,WAAS4C,SAFtCK,EAAUV,OAAgBzB,EAAAyB,OACtBF,aAAMuB,GAIN,IAAI5C,MAAAA,QAAK,CAHT4C,KAAY,UACZA,QAAarB,IACbF,KAAY,gBACRrB,aAAAA,IACAC","file":"app.min.js","sourcesContent":["import axios from 'axios'\r\nimport Noty from 'noty'\r\nimport { initAdmin } from './admin'\r\nimport moment from 'moment'\r\nimport { initStripe } from './stripe'\r\n\r\n\r\nlet addToCart = document.querySelectorAll('.add-to-cart')\r\nlet cartCounter = document.querySelector('#cartCounter')\r\nfunction updateCart(pizza){\r\n     axios.post('/update-cart', pizza).then(res =>{\r\n        cartCounter.innerText = res.data.totalQty\r\n\r\n        new Noty({\r\n            type: 'success',\r\n            timeout: 1000,\r\n            text: 'Item added to cart',\r\n            progressBar: false,\r\n            layout: 'topLeft'\r\n        }).show();\r\n    }).catch(err => {\r\n        new Noty({\r\n            type: 'error',\r\n            timeout: 1000,\r\n            text: 'Something went wrong',\r\n            progressBar: false,\r\n        }).show();\r\n     })\r\n}\r\n\r\naddToCart.forEach((btn) => {\r\n    btn.addEventListener('click', (e) => {\r\n        let pizza = JSON.parse(btn.dataset.pizza)\r\n        updateCart(pizza)\r\n    })\r\n})\r\n\r\n// Remove alert message after X seconds\r\nconst alertMsg = document.querySelector('#success-alert')\r\nif(alertMsg) {\r\n    setTimeout(() => {\r\n        alertMsg.remove()\r\n    }, 2000)\r\n}\r\n\r\n\r\n\r\n// Change order status\r\nlet statuses = document.querySelectorAll('.status_line')\r\nlet hiddenInput = document.querySelector('#hiddenInput')\r\nlet order = hiddenInput ? hiddenInput.value: null\r\norder = JSON.parse(order)\r\n\r\nlet time = document.createElement('small')\r\n\r\n\r\nfunction updateStatus(order){\r\n    statuses.forEach((status) => {\r\n        status.classList.remove('step-completed')\r\n        status.classList.remove('current')\r\n    })\r\n       let stepCompleted = true;\r\n       statuses.forEach((status) =>{\r\n            let dataProp = status.dataset.status\r\n            if(stepCompleted){\r\n                status.classList.add('step-completed')\r\n            }\r\n\r\n            if(dataProp == order.status){\r\n                stepCompleted = false\r\n                time.innerText = moment(order.updatedAt).format('hh:mm A')\r\n                status.appendChild(time)\r\n                if(status.nextElementSibling){\r\n                    status.nextElementSibling.classList.add('C')\r\n                }\r\n              \r\n            }\r\n       })\r\n\r\n}\r\n\r\nupdateStatus(order);\r\n\r\ninitStripe()\r\n\r\n\r\n//Socket\r\n\r\nlet socket = io()\r\ninitAdmin(socket)\r\n//join\r\n\r\nif(order){\r\n\r\nsocket.emit('join', `order_${order._id}`)\r\n\r\n}\r\n\r\nlet adminAreaPath = window.location.pathname\r\nif(adminAreaPath.includes('admin')) {\r\n    initAdmin(socket)\r\n    socket.emit('join', 'adminRoom')\r\n}\r\n\r\nsocket.on('orderUpdated', (data) => {\r\n    const updatedOrder = { ...order }\r\n    updatedOrder.updatedAt = moment().format()\r\n    updatedOrder.status = data.status\r\n    updateStatus(updatedOrder)\r\n    new Noty({\r\n        type: 'success',\r\n        timeout: 1000,\r\n        text: 'Order updated',\r\n        progressBar: false,\r\n    }).show();\r\n})\r\n\r\n"]}